{"version":3,"sources":["utils/debounce.js","components/Typeahead/styles.jsx","components/Typeahead/index.jsx","components/View/styles.jsx","components/View/GridView/index.jsx","components/View/TableView/index.jsx","components/View/index.jsx","styles.jsx","App.jsx","serviceWorker.js","index.js"],"names":["debounce","fn","delay","timeout","args","context","this","clearTimeout","setTimeout","apply","SearchBox","styled","input","UL","ul","Li","li","NoOptions","div","Container","Typeahead","placeholder","valueKey","labelKey","onSelect","inputRef","useRef","useState","showList","setShowList","filterOptions","setFilterOptions","onSetFilters","a","value","current","axios","get","params","q","res","console","log","status","filteredOptions","data","filter","item","toLowerCase","indexOf","slice","onClick","e","desiredResult","find","currentTarget","innerText","optionList","length","className","map","index","key","type","onChange","ref","defaultProps","Heading","GridCover","Box","Id","Title","Loading","Thumbnail","img","SwitchView","GridView","id","title","src","thumbnailUrl","TableView","style","height","width","columnDefs","headerName","field","valueFormatter","v","rowData","View","setData","loading","setLoading","isListView","setListView","useEffect","then","App","albumId","setAlbumId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0QASeA,EATE,SAACC,EAAIC,GACpB,IAAIC,EAAU,KACd,OAAO,WAAoB,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBACxB,IAAMC,EAAUC,KAChBC,aAAaJ,GACbA,EAAUK,YAAW,kBAAMP,EAAGQ,MAAMJ,EAASD,KAAOF,K,u8BCHjD,IAAMQ,EAAYC,IAAOC,MAAV,KAiBTC,EAAKF,IAAOG,GAAV,KASFC,EAAKJ,IAAOK,GAAV,KAYFC,EAAYN,IAAOO,IAAV,KAETC,EAAYR,IAAOO,IAAV,KCnChBE,EAAY,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC9CC,EAAWC,mBADkD,EAEnCC,oBAAS,GAF0B,mBAE5DC,EAF4D,KAElDC,EAFkD,OAGzBF,mBAAS,IAHgB,mBAG5DG,EAH4D,KAG7CC,EAH6C,KAK7DC,EAAY,uCAAG,gCAAAC,EAAA,6DACXC,EAAUT,EAASU,QAAnBD,MADW,SAGDE,IAAMC,IAAI,8CAA+C,CACzEC,OAAQ,CAAEC,EAAGL,KAJI,OAGbM,EAHa,OAMnBC,QAAQC,IAAI,MAAOF,EAAKN,GACL,MAAfM,EAAIG,SACAC,EAAkBJ,EAAIK,KAAKC,QAC/B,SAACC,GAAD,OAAUA,EAAKxB,GAAUyB,cAAcC,QAAQf,IAAU,KAGvDA,GACFL,GAAY,GACZE,EAAiBa,EAAgBM,MAAM,EAAG,OAE1CrB,GAAY,GACZE,EAAiB,MAjBF,2CAAH,qDAsBZoB,EAAU,SAACC,GACf,IAAMC,EAAgBvB,EAAcwB,MAClC,SAACP,GAAD,OAAUA,EAAKxB,KAAc6B,EAAEG,cAAcC,aAE/ChC,EAAS6B,GACT5B,EAASU,QAAQD,MAAQmB,EAAc9B,GACvCM,GAAY,IAGV4B,EAAa,KAwBjB,OAtBI7B,IAEA6B,EADE3B,EAAc4B,OAEd,kBAAC7C,EAAD,CAAI8C,UAAU,WACX7B,EAAc8B,KAAI,SAACb,EAAMc,GAKxB,OACE,kBAAC9C,EAAD,CAAI4C,eALFA,EAKwBG,IAAKf,EAAKzB,GAAW6B,QAASA,GACrDJ,EAAKxB,QAOH,kBAACN,EAAD,CAAW0C,UAAU,cAArB,eAKf,kBAACxC,EAAD,KACE,kBAACT,EAAD,CACEqD,KAAK,OACLC,SAAUhE,EAASgC,EAAc,KACjCiC,IAAKxC,EACLJ,YAAaA,IAEdoC,IAaPrC,EAAU8C,aAAe,CACvB3C,SAAU,QACVD,SAAU,KACVY,MAAO,GACPV,SAAU,cAGGJ,Q,oyCC7FR,IAAMD,EAAYR,IAAOO,IAAV,KAMTiD,EAAUxD,IAAOO,IAAV,KAKPkD,EAAYzD,IAAOO,IAAV,KAKTmD,EAAM1D,IAAOO,IAAV,KAWHoD,EAAK3D,IAAOO,IAAV,KAMFqD,EAAQ5D,IAAOO,IAAV,KAOLsD,EAAU7D,IAAOO,IAAV,KAEPuD,EAAY9D,IAAO+D,IAAV,KAETC,EAAahE,IAAOO,IAAV,KC5BR0D,EAdE,SAAC,GAAc,IAAZ/B,EAAW,EAAXA,KAClB,OACE,kBAACuB,EAAD,KACGvB,EAAKe,KAAI,SAACb,GAAD,OACR,kBAACsB,EAAD,CAAKP,IAAKf,EAAK8B,IACb,kBAACN,EAAD,KAAQxB,EAAK+B,OACb,kBAACL,EAAD,CAAWM,IAAKhC,EAAKiC,eACrB,kBAACV,EAAD,SAAMvB,EAAK8B,U,QCyBNI,G,YA9BG,SAAC,GAAc,IAAZpC,EAAW,EAAXA,KAiBnB,OACE,yBACEc,UAAU,kBACVuB,MAAO,CACLC,OAAQ,QACRC,MAAO,QAGT,kBAAC,cAAD,CAAaC,WAxBE,CACjB,CACEC,WAAY,KACZC,MAAO,MAET,CACED,WAAY,QACZC,MAAO,SAET,CACED,WAAY,YACZC,MAAO,eACPC,eAAgB,SAACC,GAAD,OAAOA,EAAET,gBAYYU,QAAS7C,OCcrC8C,EAtCF,SAAC,GAAY,IAAVd,EAAS,EAATA,GAAS,EACClD,mBAAS,IADV,mBAChBkB,EADgB,KACV+C,EADU,OAEOjE,oBAAS,GAFhB,mBAEhBkE,EAFgB,KAEPC,EAFO,OAGWnE,oBAAS,GAHpB,mBAGhBoE,EAHgB,KAGJC,EAHI,KAiBvB,OAZAC,qBAAU,WACRH,GAAW,GACX1D,IACGC,IADH,8DAC8DwC,GAAM,IACjEqB,MAAK,SAAC1D,GACc,MAAfA,EAAIG,SACNiD,EAAQpD,EAAIK,MACZiD,GAAW,SAGhB,CAACjB,IAGF,kBAAC,EAAD,KACGgB,EACC,kBAACrB,EAAD,4BAEA,oCACE,kBAACL,EAAD,oCAAsCU,GAAM,EAA5C,KACA,kBAACF,EAAD,CACExB,QAAS,WACP6C,GAAaD,KAGdA,EAAa,qBAAuB,uBAEtCA,EAAa,kBAAC,EAAD,CAAWlD,KAAMA,IAAW,kBAAC,EAAD,CAAUA,KAAMA,O,yFCpC7D,IAAM1B,EAAYR,IAAOO,IAAV,KCoBPiF,EAhBH,WAAO,IAAD,EACcxE,mBAAS,MADvB,mBACTyE,EADS,KACAC,EADA,KAGhB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEhF,YAAY,sBACZG,SAAU,SAACiE,GACTY,EAAWZ,EAAEZ,OAGjB,kBAAC,EAAD,CAAMA,GAAIuB,MCLIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7E,QAAQ6E,MAAMA,EAAMC,c","file":"static/js/main.4e9a9c0b.chunk.js","sourcesContent":["const debounce = (fn, delay) => {\n  let timeout = null;\n  return function (...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn.apply(context, args), delay);\n  };\n};\n\nexport default debounce;\n","import styled from \"styled-components\";\n\nexport const SearchBox = styled.input`\n  box-sizing: border-box;\n  border: 1px solid #d6d6d6;\n  border-radius: 4px;\n  height: 40px;\n  font-size: 16px;\n  padding: 4px;\n  transition: width 0.3s;\n  text-indent: 8px;\n  width: 100%;\n  &:focus {\n    width: 100%;\n    outline: none;\n    border: 1px solid #08a1b6;\n  }\n`;\n\nexport const UL = styled.ul`\n  border: 1px solid #e7e7e7;\n  outline: none;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  max-height: 360px;\n`;\n\nexport const Li = styled.li`\n  padding: 8px;\n  border-bottom: 1px solid #e7e7e7;\n  cursor: pointer;\n  &:hover {\n    background-color: #e7e7e7;\n  }\n  &.last-child {\n    border-bottom: none;\n  }\n`;\n\nexport const NoOptions = styled.div``;\n\nexport const Container = styled.div`\n  max-width: 280px;\n`;\n","import React, { useRef, useState } from \"react\";\nimport { arrayOf, shape, string, func } from \"prop-types\";\nimport axios from \"axios\";\n\nimport debounce from \"../../utils/debounce\";\nimport { SearchBox, UL, Li, NoOptions, Container } from \"./styles\";\n\nconst Typeahead = ({ placeholder, valueKey, labelKey, onSelect }) => {\n  const inputRef = useRef();\n  const [showList, setShowList] = useState(false);\n  const [filterOptions, setFilterOptions] = useState([]);\n\n  const onSetFilters = async () => {\n    const { value } = inputRef.current;\n\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/albums\", {\n      params: { q: value },\n    });\n    console.log(\"res\", res, value);\n    if (res.status === 200) {\n      const filteredOptions = res.data.filter(\n        (item) => item[labelKey].toLowerCase().indexOf(value) > -1\n      );\n\n      if (value) {\n        setShowList(true);\n        setFilterOptions(filteredOptions.slice(0, 10));\n      } else {\n        setShowList(false);\n        setFilterOptions([]);\n      }\n    }\n  };\n\n  const onClick = (e) => {\n    const desiredResult = filterOptions.find(\n      (item) => item[labelKey] === e.currentTarget.innerText\n    );\n    onSelect(desiredResult);\n    inputRef.current.value = desiredResult[labelKey];\n    setShowList(false);\n  };\n\n  let optionList = null;\n\n  if (showList) {\n    if (filterOptions.length) {\n      optionList = (\n        <UL className=\"options\">\n          {filterOptions.map((item, index) => {\n            let className;\n            // if (index === activeOption) {\n            //   className = \"option-active\";\n            // }\n            return (\n              <Li className={className} key={item[valueKey]} onClick={onClick}>\n                {item[labelKey]}\n              </Li>\n            );\n          })}\n        </UL>\n      );\n    } else {\n      optionList = <NoOptions className=\"no-options\">No Option!</NoOptions>;\n    }\n  }\n\n  return (\n    <Container>\n      <SearchBox\n        type=\"text\"\n        onChange={debounce(onSetFilters, 300)}\n        ref={inputRef}\n        placeholder={placeholder}\n      />\n      {optionList}\n    </Container>\n  );\n};\n\nTypeahead.propTypes = {\n  options: arrayOf(shape({})).isRequired,\n  labelKey: string,\n  valueKey: string,\n  value: shape({}),\n  onSelect: func,\n};\n\nTypeahead.defaultProps = {\n  labelKey: \"title\",\n  valueKey: \"id\",\n  value: {},\n  onSelect: () => {},\n};\n\nexport default Typeahead;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  .ag-center-cols-container {\n    width: 100% !important;\n  }\n`;\n\nexport const Heading = styled.div`\n  padding: 16px;\n  margin-top: 16px;\n`;\n\nexport const GridCover = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Box = styled.div`\n  flex: 0 0 280px;\n  margin: 16px;\n  border: 1px solid #e7e7e7;\n  border-radius: 8px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n`;\n\nexport const Id = styled.div`\n  margin-bottom: 8px;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nexport const Title = styled.div`\n  margin-top: 8px;\n  font-size: 14px;\n  color: #9b9b9b;\n  font-weight: bold;\n`;\n\nexport const Loading = styled.div``;\n\nexport const Thumbnail = styled.img``;\n\nexport const SwitchView = styled.div`\n  padding: 16px;\n  border-radius: 16px;\n  border: 1px solid #e7e7e7;\n  background-color: green;\n  cursor: pointer;\n  display: inline-block;\n  color: #fff;\n  font-weight: bold;\n  margin-bottom: 24px;\n`;\n","import React from \"react\";\n\nimport { GridCover, Box, Id, Title, Thumbnail } from \"../styles\";\n\nconst GridView = ({ data }) => {\n  return (\n    <GridCover>\n      {data.map((item) => (\n        <Box key={item.id}>\n          <Title>{item.title}</Title>\n          <Thumbnail src={item.thumbnailUrl} />\n          <Id>#{item.id}</Id>\n        </Box>\n      ))}\n    </GridCover>\n  );\n};\n\nexport default GridView;\n","import React from \"react\";\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n\nconst TableView = ({ data }) => {\n  const columnDefs = [\n    {\n      headerName: \"Id\",\n      field: \"id\",\n    },\n    {\n      headerName: \"Title\",\n      field: \"title\",\n    },\n    {\n      headerName: \"Thumbnail\",\n      field: \"thumbnailUrl\",\n      valueFormatter: (v) => v.thumbnailUrl,\n    },\n  ];\n\n  return (\n    <div\n      className=\"ag-theme-alpine\"\n      style={{\n        height: \"460px\",\n        width: \"80%\",\n      }}\n    >\n      <AgGridReact columnDefs={columnDefs} rowData={data}></AgGridReact>\n    </div>\n  );\n};\n\nexport default TableView;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport GridView from \"./GridView\";\nimport TableView from \"./TableView\";\nimport { Container, Heading, Loading, SwitchView } from \"./styles\";\n\nconst View = ({ id }) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isListView, setListView] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get(`https://jsonplaceholder.typicode.com/photos?albumId=${id || 1}`)\n      .then((res) => {\n        if (res.status === 200) {\n          setData(res.data);\n          setLoading(false);\n        }\n      });\n  }, [id]);\n\n  return (\n    <Container>\n      {loading ? (\n        <Loading>Fetching Details...</Loading>\n      ) : (\n        <>\n          <Heading>Showing Details of Album Id {id || 1}.</Heading>\n          <SwitchView\n            onClick={() => {\n              setListView(!isListView);\n            }}\n          >\n            {isListView ? \"Switch To GridView\" : \"Switch To TableView\"}\n          </SwitchView>\n          {isListView ? <TableView data={data} /> : <GridView data={data} />}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default View;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 16px;\n`;\n","import React, { useState } from \"react\";\n\nimport Typeahead from \"./components/Typeahead\";\nimport View from \"./components/View\";\nimport { Container } from \"./styles\";\n\nconst App = () => {\n  const [albumId, setAlbumId] = useState(null);\n\n  return (\n    <Container>\n      <Typeahead\n        placeholder=\"Type an Album Title\"\n        onSelect={(v) => {\n          setAlbumId(v.id);\n        }}\n      />\n      <View id={albumId} />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}